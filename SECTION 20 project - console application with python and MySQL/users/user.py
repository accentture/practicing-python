
#importing my database module
import users.connection as connection

#to work with data
import datetime

#to hash a password  -> an hash is encode the password                  encode : cifrar
import hashlib


#using my funcion to use connection with database
connect = connection.toConnect()
database = connect[0]
cursor = connect[1]

#checking if connection happened
print(database)



class User :

    #constructor is the first method at execute when I create a class
    #getter to get every date

    def __init__(self, names, surnames, email, password) :  #every method must has self
        self.names = names
        self.surnames = surnames
        self.email = email
        self.password = password

    def register(self) :
        date = datetime.datetime.now()

        #encode password
        _encoded = hashlib.sha256()  # sha256 : algorithm ot encode pretty interesting
                                            # utf8 : utf8 codification
        _encoded.update(self.password.encode('utf8')) # it is important to pass param in bytes, for that I use encode() method

        #in this variable I save my query
        sql = 'INSERT INTO users VALUES(null, %s, %s, %s, %s, %s)'  # %s serves to pass data that I have in a tuple

        # to catch errors when I try insert my user in the database
        try :
                                                          # hexdigest :using hexadecimal value generated by hashlib library
            user = (self.names, self.surnames, self.email, _encoded.hexdigest(), date)
            cursor.execute(sql, user)
            database.commit()
            result = [cursor.rowcount, self]# cursor.rowcount : amount register that was modified
        except :
            result = [0, self]

        return result

    def identify(self) :

        #query to check if user exists
        sql = "SELECT * FROM users WHERE email = %s AND password = %s"

        #encode password
        _encoded = hashlib.sha256()  
        _encoded.update(self.password.encode('utf8')) 

        #data to pass to query
        user = (self.email, _encoded.hexdigest())

        cursor.execute(sql, user)

        #saving result of query
        result = cursor.fetchone() # fetchone : get one user
                                   # if I want a query success, I neew the correct password

        return result #result is a tuple and wil be got from database